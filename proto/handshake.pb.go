// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: handshake.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Handshake message - minimal, fits in single MTU (~128 bytes)
// Exchanged immediately on connection to establish sync state
type HandshakeMessage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DeviceId        string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	FirstName       string                 `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	ProtocolVersion int32                  `protobuf:"varint,3,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	RxPhotoHash     []byte                 `protobuf:"bytes,4,opt,name=rx_photo_hash,json=rxPhotoHash,proto3" json:"rx_photo_hash,omitempty"`         // SHA-256 hash (32 bytes) of photo we RECEIVED from remote device
	TxPhotoHash     []byte                 `protobuf:"bytes,5,opt,name=tx_photo_hash,json=txPhotoHash,proto3" json:"tx_photo_hash,omitempty"`         // SHA-256 hash (32 bytes) of OUR photo available to send
	ProfileVersion  int32                  `protobuf:"varint,6,opt,name=profile_version,json=profileVersion,proto3" json:"profile_version,omitempty"` // Profile version number, increments on any profile change
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HandshakeMessage) Reset() {
	*x = HandshakeMessage{}
	mi := &file_handshake_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandshakeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeMessage) ProtoMessage() {}

func (x *HandshakeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeMessage.ProtoReflect.Descriptor instead.
func (*HandshakeMessage) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{0}
}

func (x *HandshakeMessage) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *HandshakeMessage) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *HandshakeMessage) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *HandshakeMessage) GetRxPhotoHash() []byte {
	if x != nil {
		return x.RxPhotoHash
	}
	return nil
}

func (x *HandshakeMessage) GetTxPhotoHash() []byte {
	if x != nil {
		return x.TxPhotoHash
	}
	return nil
}

func (x *HandshakeMessage) GetProfileVersion() int32 {
	if x != nil {
		return x.ProfileVersion
	}
	return 0
}

// Profile message - detailed info, sent after handshake
// Can be fragmented if it exceeds MTU
type ProfileMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	LastName      string                 `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Tagline       string                 `protobuf:"bytes,4,opt,name=tagline,proto3" json:"tagline,omitempty"`
	Insta         string                 `protobuf:"bytes,5,opt,name=insta,proto3" json:"insta,omitempty"`
	Linkedin      string                 `protobuf:"bytes,6,opt,name=linkedin,proto3" json:"linkedin,omitempty"`
	Youtube       string                 `protobuf:"bytes,7,opt,name=youtube,proto3" json:"youtube,omitempty"`
	Tiktok        string                 `protobuf:"bytes,8,opt,name=tiktok,proto3" json:"tiktok,omitempty"`
	Gmail         string                 `protobuf:"bytes,9,opt,name=gmail,proto3" json:"gmail,omitempty"`
	Imessage      string                 `protobuf:"bytes,10,opt,name=imessage,proto3" json:"imessage,omitempty"`
	Whatsapp      string                 `protobuf:"bytes,11,opt,name=whatsapp,proto3" json:"whatsapp,omitempty"`
	Signal        string                 `protobuf:"bytes,12,opt,name=signal,proto3" json:"signal,omitempty"`
	Telegram      string                 `protobuf:"bytes,13,opt,name=telegram,proto3" json:"telegram,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileMessage) Reset() {
	*x = ProfileMessage{}
	mi := &file_handshake_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileMessage) ProtoMessage() {}

func (x *ProfileMessage) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileMessage.ProtoReflect.Descriptor instead.
func (*ProfileMessage) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{1}
}

func (x *ProfileMessage) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ProfileMessage) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ProfileMessage) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ProfileMessage) GetTagline() string {
	if x != nil {
		return x.Tagline
	}
	return ""
}

func (x *ProfileMessage) GetInsta() string {
	if x != nil {
		return x.Insta
	}
	return ""
}

func (x *ProfileMessage) GetLinkedin() string {
	if x != nil {
		return x.Linkedin
	}
	return ""
}

func (x *ProfileMessage) GetYoutube() string {
	if x != nil {
		return x.Youtube
	}
	return ""
}

func (x *ProfileMessage) GetTiktok() string {
	if x != nil {
		return x.Tiktok
	}
	return ""
}

func (x *ProfileMessage) GetGmail() string {
	if x != nil {
		return x.Gmail
	}
	return ""
}

func (x *ProfileMessage) GetImessage() string {
	if x != nil {
		return x.Imessage
	}
	return ""
}

func (x *ProfileMessage) GetWhatsapp() string {
	if x != nil {
		return x.Whatsapp
	}
	return ""
}

func (x *ProfileMessage) GetSignal() string {
	if x != nil {
		return x.Signal
	}
	return ""
}

func (x *ProfileMessage) GetTelegram() string {
	if x != nil {
		return x.Telegram
	}
	return ""
}

// Acknowledgment of photo transfer completion
type PhotoCompletionAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	TransferCrc   uint32                 `protobuf:"fixed32,2,opt,name=transfer_crc,json=transferCrc,proto3" json:"transfer_crc,omitempty"` // CRC-32 of complete photo data
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PhotoCompletionAck) Reset() {
	*x = PhotoCompletionAck{}
	mi := &file_handshake_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhotoCompletionAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoCompletionAck) ProtoMessage() {}

func (x *PhotoCompletionAck) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoCompletionAck.ProtoReflect.Descriptor instead.
func (*PhotoCompletionAck) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{2}
}

func (x *PhotoCompletionAck) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *PhotoCompletionAck) GetTransferCrc() uint32 {
	if x != nil {
		return x.TransferCrc
	}
	return 0
}

func (x *PhotoCompletionAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Single device's state in the mesh (photo + profile)
type DeviceState struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DeviceId           string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                                 // Logical base36 ID
	PhotoHash          []byte                 `protobuf:"bytes,2,opt,name=photo_hash,json=photoHash,proto3" json:"photo_hash,omitempty"`                              // SHA-256 hash (32 bytes) of their current photo
	LastSeenTimestamp  int64                  `protobuf:"varint,3,opt,name=last_seen_timestamp,json=lastSeenTimestamp,proto3" json:"last_seen_timestamp,omitempty"`   // Unix timestamp when this state was last observed
	FirstName          string                 `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                              // Cached first name
	ProfileVersion     int32                  `protobuf:"varint,5,opt,name=profile_version,json=profileVersion,proto3" json:"profile_version,omitempty"`              // Profile version number, increments on ANY profile change
	ProfileSummaryHash []byte                 `protobuf:"bytes,6,opt,name=profile_summary_hash,json=profileSummaryHash,proto3" json:"profile_summary_hash,omitempty"` // SHA-256 hash of all profile fields for change detection
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DeviceState) Reset() {
	*x = DeviceState{}
	mi := &file_handshake_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceState) ProtoMessage() {}

func (x *DeviceState) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceState.ProtoReflect.Descriptor instead.
func (*DeviceState) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceState) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceState) GetPhotoHash() []byte {
	if x != nil {
		return x.PhotoHash
	}
	return nil
}

func (x *DeviceState) GetLastSeenTimestamp() int64 {
	if x != nil {
		return x.LastSeenTimestamp
	}
	return 0
}

func (x *DeviceState) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *DeviceState) GetProfileVersion() int32 {
	if x != nil {
		return x.ProfileVersion
	}
	return 0
}

func (x *DeviceState) GetProfileSummaryHash() []byte {
	if x != nil {
		return x.ProfileSummaryHash
	}
	return nil
}

// Gossip message - exchanged periodically between neighbors
// Contains sender's complete view of the mesh network
type GossipMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SenderDeviceId string                 `protobuf:"bytes,1,opt,name=sender_device_id,json=senderDeviceId,proto3" json:"sender_device_id,omitempty"` // Who is sending this gossip
	Timestamp      int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                  // When this gossip was created
	MeshView       []*DeviceState         `protobuf:"bytes,3,rep,name=mesh_view,json=meshView,proto3" json:"mesh_view,omitempty"`                     // Sender's view of all devices in network
	GossipRound    int32                  `protobuf:"varint,4,opt,name=gossip_round,json=gossipRound,proto3" json:"gossip_round,omitempty"`           // Increments with each gossip broadcast
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GossipMessage) Reset() {
	*x = GossipMessage{}
	mi := &file_handshake_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GossipMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipMessage) ProtoMessage() {}

func (x *GossipMessage) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipMessage.ProtoReflect.Descriptor instead.
func (*GossipMessage) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{4}
}

func (x *GossipMessage) GetSenderDeviceId() string {
	if x != nil {
		return x.SenderDeviceId
	}
	return ""
}

func (x *GossipMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GossipMessage) GetMeshView() []*DeviceState {
	if x != nil {
		return x.MeshView
	}
	return nil
}

func (x *GossipMessage) GetGossipRound() int32 {
	if x != nil {
		return x.GossipRound
	}
	return 0
}

// Request for specific photo based on gossip information
// Sent when device learns about a photo it doesn't have
type PhotoRequestMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RequesterDeviceId string                 `protobuf:"bytes,1,opt,name=requester_device_id,json=requesterDeviceId,proto3" json:"requester_device_id,omitempty"` // Who wants the photo
	TargetDeviceId    string                 `protobuf:"bytes,2,opt,name=target_device_id,json=targetDeviceId,proto3" json:"target_device_id,omitempty"`          // Whose photo we want
	PhotoHash         []byte                 `protobuf:"bytes,3,opt,name=photo_hash,json=photoHash,proto3" json:"photo_hash,omitempty"`                           // Hash of the photo we want
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PhotoRequestMessage) Reset() {
	*x = PhotoRequestMessage{}
	mi := &file_handshake_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhotoRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoRequestMessage) ProtoMessage() {}

func (x *PhotoRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoRequestMessage.ProtoReflect.Descriptor instead.
func (*PhotoRequestMessage) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{5}
}

func (x *PhotoRequestMessage) GetRequesterDeviceId() string {
	if x != nil {
		return x.RequesterDeviceId
	}
	return ""
}

func (x *PhotoRequestMessage) GetTargetDeviceId() string {
	if x != nil {
		return x.TargetDeviceId
	}
	return ""
}

func (x *PhotoRequestMessage) GetPhotoHash() []byte {
	if x != nil {
		return x.PhotoHash
	}
	return nil
}

// Request for profile details based on gossip information
// Sent when device learns about a profile version it doesn't have
type ProfileRequestMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RequesterDeviceId string                 `protobuf:"bytes,1,opt,name=requester_device_id,json=requesterDeviceId,proto3" json:"requester_device_id,omitempty"` // Who wants the profile
	TargetDeviceId    string                 `protobuf:"bytes,2,opt,name=target_device_id,json=targetDeviceId,proto3" json:"target_device_id,omitempty"`          // Whose profile we want
	ExpectedVersion   int32                  `protobuf:"varint,3,opt,name=expected_version,json=expectedVersion,proto3" json:"expected_version,omitempty"`        // Version number we're requesting
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ProfileRequestMessage) Reset() {
	*x = ProfileRequestMessage{}
	mi := &file_handshake_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequestMessage) ProtoMessage() {}

func (x *ProfileRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequestMessage.ProtoReflect.Descriptor instead.
func (*ProfileRequestMessage) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{6}
}

func (x *ProfileRequestMessage) GetRequesterDeviceId() string {
	if x != nil {
		return x.RequesterDeviceId
	}
	return ""
}

func (x *ProfileRequestMessage) GetTargetDeviceId() string {
	if x != nil {
		return x.TargetDeviceId
	}
	return ""
}

func (x *ProfileRequestMessage) GetExpectedVersion() int32 {
	if x != nil {
		return x.ExpectedVersion
	}
	return 0
}

var File_handshake_proto protoreflect.FileDescriptor

const file_handshake_proto_rawDesc = "" +
	"\n" +
	"\x0fhandshake.proto\x12\tauraphone\"\xea\x01\n" +
	"\x10HandshakeMessage\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\tR\bdeviceId\x12\x1d\n" +
	"\n" +
	"first_name\x18\x02 \x01(\tR\tfirstName\x12)\n" +
	"\x10protocol_version\x18\x03 \x01(\x05R\x0fprotocolVersion\x12\"\n" +
	"\rrx_photo_hash\x18\x04 \x01(\fR\vrxPhotoHash\x12\"\n" +
	"\rtx_photo_hash\x18\x05 \x01(\fR\vtxPhotoHash\x12'\n" +
	"\x0fprofile_version\x18\x06 \x01(\x05R\x0eprofileVersion\"\xed\x02\n" +
	"\x0eProfileMessage\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\tR\bdeviceId\x12\x1b\n" +
	"\tlast_name\x18\x02 \x01(\tR\blastName\x12!\n" +
	"\fphone_number\x18\x03 \x01(\tR\vphoneNumber\x12\x18\n" +
	"\atagline\x18\x04 \x01(\tR\atagline\x12\x14\n" +
	"\x05insta\x18\x05 \x01(\tR\x05insta\x12\x1a\n" +
	"\blinkedin\x18\x06 \x01(\tR\blinkedin\x12\x18\n" +
	"\ayoutube\x18\a \x01(\tR\ayoutube\x12\x16\n" +
	"\x06tiktok\x18\b \x01(\tR\x06tiktok\x12\x14\n" +
	"\x05gmail\x18\t \x01(\tR\x05gmail\x12\x1a\n" +
	"\bimessage\x18\n" +
	" \x01(\tR\bimessage\x12\x1a\n" +
	"\bwhatsapp\x18\v \x01(\tR\bwhatsapp\x12\x16\n" +
	"\x06signal\x18\f \x01(\tR\x06signal\x12\x1a\n" +
	"\btelegram\x18\r \x01(\tR\btelegram\"n\n" +
	"\x12PhotoCompletionAck\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\tR\bdeviceId\x12!\n" +
	"\ftransfer_crc\x18\x02 \x01(\aR\vtransferCrc\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\"\xf3\x01\n" +
	"\vDeviceState\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\tR\bdeviceId\x12\x1d\n" +
	"\n" +
	"photo_hash\x18\x02 \x01(\fR\tphotoHash\x12.\n" +
	"\x13last_seen_timestamp\x18\x03 \x01(\x03R\x11lastSeenTimestamp\x12\x1d\n" +
	"\n" +
	"first_name\x18\x04 \x01(\tR\tfirstName\x12'\n" +
	"\x0fprofile_version\x18\x05 \x01(\x05R\x0eprofileVersion\x120\n" +
	"\x14profile_summary_hash\x18\x06 \x01(\fR\x12profileSummaryHash\"\xaf\x01\n" +
	"\rGossipMessage\x12(\n" +
	"\x10sender_device_id\x18\x01 \x01(\tR\x0esenderDeviceId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x123\n" +
	"\tmesh_view\x18\x03 \x03(\v2\x16.auraphone.DeviceStateR\bmeshView\x12!\n" +
	"\fgossip_round\x18\x04 \x01(\x05R\vgossipRound\"\x8e\x01\n" +
	"\x13PhotoRequestMessage\x12.\n" +
	"\x13requester_device_id\x18\x01 \x01(\tR\x11requesterDeviceId\x12(\n" +
	"\x10target_device_id\x18\x02 \x01(\tR\x0etargetDeviceId\x12\x1d\n" +
	"\n" +
	"photo_hash\x18\x03 \x01(\fR\tphotoHash\"\x9c\x01\n" +
	"\x15ProfileRequestMessage\x12.\n" +
	"\x13requester_device_id\x18\x01 \x01(\tR\x11requesterDeviceId\x12(\n" +
	"\x10target_device_id\x18\x02 \x01(\tR\x0etargetDeviceId\x12)\n" +
	"\x10expected_version\x18\x03 \x01(\x05R\x0fexpectedVersionB-Z+github.com/andrewarrow/auraphone-blue/protob\x06proto3"

var (
	file_handshake_proto_rawDescOnce sync.Once
	file_handshake_proto_rawDescData []byte
)

func file_handshake_proto_rawDescGZIP() []byte {
	file_handshake_proto_rawDescOnce.Do(func() {
		file_handshake_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_handshake_proto_rawDesc), len(file_handshake_proto_rawDesc)))
	})
	return file_handshake_proto_rawDescData
}

var file_handshake_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_handshake_proto_goTypes = []any{
	(*HandshakeMessage)(nil),      // 0: auraphone.HandshakeMessage
	(*ProfileMessage)(nil),        // 1: auraphone.ProfileMessage
	(*PhotoCompletionAck)(nil),    // 2: auraphone.PhotoCompletionAck
	(*DeviceState)(nil),           // 3: auraphone.DeviceState
	(*GossipMessage)(nil),         // 4: auraphone.GossipMessage
	(*PhotoRequestMessage)(nil),   // 5: auraphone.PhotoRequestMessage
	(*ProfileRequestMessage)(nil), // 6: auraphone.ProfileRequestMessage
}
var file_handshake_proto_depIdxs = []int32{
	3, // 0: auraphone.GossipMessage.mesh_view:type_name -> auraphone.DeviceState
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_handshake_proto_init() }
func file_handshake_proto_init() {
	if File_handshake_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_handshake_proto_rawDesc), len(file_handshake_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_handshake_proto_goTypes,
		DependencyIndexes: file_handshake_proto_depIdxs,
		MessageInfos:      file_handshake_proto_msgTypes,
	}.Build()
	File_handshake_proto = out.File
	file_handshake_proto_goTypes = nil
	file_handshake_proto_depIdxs = nil
}
