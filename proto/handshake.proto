syntax = "proto3";

package auraphone;

option go_package = "github.com/andrewarrow/auraphone-blue/proto";

// Handshake message - minimal, fits in single MTU (~128 bytes)
// Exchanged immediately on connection to establish sync state
message HandshakeMessage {
  string device_id = 1;
  string first_name = 2;
  int32 protocol_version = 3;
  bytes rx_photo_hash = 4;   // SHA-256 hash (32 bytes) of photo we RECEIVED from remote device
  bytes tx_photo_hash = 5;   // SHA-256 hash (32 bytes) of OUR photo available to send
  int32 profile_version = 6; // Profile version number, increments on any profile change
}

// Profile message - detailed info, sent after handshake
// Can be fragmented if it exceeds MTU
message ProfileMessage {
  string device_id = 1;
  string last_name = 2;
  string phone_number = 3;
  string tagline = 4;
  string insta = 5;
  string linkedin = 6;
  string youtube = 7;
  string tiktok = 8;
  string gmail = 9;
  string imessage = 10;
  string whatsapp = 11;
  string signal = 12;
  string telegram = 13;
}

// Acknowledgment of photo transfer completion
message PhotoCompletionAck {
  string device_id = 1;
  fixed32 transfer_crc = 2;  // CRC-32 of complete photo data
  bool success = 3;
}

// Gossip Protocol Messages - For mesh network photo distribution
// =================================================================

// Single device's state in the mesh (photo + profile)
message DeviceState {
  string device_id = 1;           // Logical base36 ID
  bytes photo_hash = 2;           // SHA-256 hash (32 bytes) of their current photo
  int64 last_seen_timestamp = 3;  // Unix timestamp when this state was last observed
  string first_name = 4;          // Cached first name
  int32 profile_version = 5;      // Profile version number, increments on ANY profile change
  bytes profile_summary_hash = 6; // SHA-256 hash of all profile fields for change detection
}

// Gossip message - exchanged periodically between neighbors
// Contains sender's complete view of the mesh network
message GossipMessage {
  string sender_device_id = 1;           // Who is sending this gossip
  int64 timestamp = 2;                   // When this gossip was created
  repeated DeviceState mesh_view = 3;    // Sender's view of all devices in network
  int32 gossip_round = 4;                // Increments with each gossip broadcast
}

// Request for specific photo based on gossip information
// Sent when device learns about a photo it doesn't have
message PhotoRequestMessage {
  string requester_device_id = 1;  // Who wants the photo
  string target_device_id = 2;     // Whose photo we want
  bytes photo_hash = 3;            // Hash of the photo we want
}

// Request for profile details based on gossip information
// Sent when device learns about a profile version it doesn't have
message ProfileRequestMessage {
  string requester_device_id = 1;  // Who wants the profile
  string target_device_id = 2;     // Whose profile we want
  int32 expected_version = 3;      // Version number we're requesting
}
